name: Pipeline Tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
permissions:
  actions: write
  contents: write
  pull-requests: write
jobs:
  pipeline-tests:
    name: Pipeline Tests
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PIPE_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.23.0'

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Zig
        run: sudo snap install zig --classic --beta

      - name: Install Java
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          java -version

      - name: Create Python Hello World
        run: echo "print('Hello, World!')" > main.py
      - name: Create Java Hello World
        run: |  
          echo 'public class Hello { public static void main(String[] args) { System.out.println("Hello, World!"); } }' > Hello.java

      - name: Add workflow files
        run: |
          go run main.go zig
          go run main.go python
          go run main.go golang
          go run main.go java
          zig init

      - name: Add Files and Commit
        env:
          token: ${{ secrets.PIPE_TOKEN }}
          GH_TOKEN: ${{ github.token }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -B temp_pipe
          git add . || echo "No changes to commit"
          git commit -m "Add temporary workflow files" || echo "No changes to commit"
          git push -u origin temp_pipe

      - name: Workflow Dispatch
        env:
          token: ${{ secrets.PIPE_TOKEN }}
          GH_TOKEN: ${{ github.token }}
        run: |
          git fetch origin temp_pipe
          
          git checkout -B temp_pipe origin/temp_pipe
          
          git pull
          
          echo "Current branch:"

          git branch --show-current

          echo "Pipeline Structure:"

          ls .github/workflows

          echo "Current directory:"
          pwd

          echo "Executing workflow python.yml"

          run_id=$(gh workflow run python.yml --ref temp_pipe --json id | jq -r '.id')
          while [[ -z "$run_id" ]]; do
            sleep 5
            run_id=$(gh run list --workflow=python.yml --branch=temp_pipe --json databaseId -q '.[0].databaseId')
          done
          while true; do
            status=$(gh run view "$run_id" --json status,conclusion -q '.status')
            if [[ "$status" == "completed" ]]; then
              conclusion=$(gh run view "$run_id" --json conclusion -q '.conclusion')
              if [[ "$conclusion" == "success" ]]; then
                echo "python.yml succeeded"
                break
              else
                echo "python.yml failed"
                exit 1
              fi
            fi
            sleep 10
          done

          echo "Executing workflow python_format.yml"

          run_id=$(gh workflow run python_format.yml --ref temp_pipe --json id | jq -r '.id')
          while [[ -z "$run_id" ]]; do
            sleep 5
            run_id=$(gh run list --workflow=python_format.yml --branch=temp_pipe --json databaseId -q '.[0].databaseId')
          done
          while true; do
            status=$(gh run view "$run_id" --json status,conclusion -q '.status')
            if [[ "$status" == "completed" ]]; then
              conclusion=$(gh run view "$run_id" --json conclusion -q '.conclusion')
              if [[ "$conclusion" == "success" ]]; then
                echo "python_format.yml succeeded"
                break
              else
                echo "python_format.yml failed"
                exit 1
              fi
            fi
            sleep 10
          done

          echo "Executing workflow zig.yml"

          run_id=$(gh workflow run zig.yml --ref temp_pipe --json id | jq -r '.id')
          while [[ -z "$run_id" ]]; do
            sleep 5
            run_id=$(gh run list --workflow=zig.yml --branch=temp_pipe --json databaseId -q '.[0].databaseId')
          done
          while true; do
            status=$(gh run view "$run_id" --json status,conclusion -q '.status')
            if [[ "$status" == "completed" ]]; then
              conclusion=$(gh run view "$run_id" --json conclusion -q '.conclusion')
              if [[ "$conclusion" == "success" ]]; then
                echo "zig.yml succeeded"
                break
              else
                echo "zig.yml failed"
                exit 1
              fi
            fi
            sleep 10
          done

          echo "Executing workflow zig_format.yml"

          run_id=$(gh workflow run zig_format.yml --ref temp_pipe --json id | jq -r '.id')
          while [[ -z "$run_id" ]]; do
            sleep 5
            run_id=$(gh run list --workflow=zig_format.yml --branch=temp_pipe --json databaseId -q '.[0].databaseId')
          done
          while true; do
            status=$(gh run view "$run_id" --json status,conclusion -q '.status')
            if [[ "$status" == "completed" ]]; then
              conclusion=$(gh run view "$run_id" --json conclusion -q '.conclusion')
              if [[ "$conclusion" == "success" ]]; then
                echo "zig_format.yml succeeded"
                break
              else
                echo "zig_format.yml failed"
                exit 1
              fi
            fi
            sleep 10
          done
          
          echo "Executing workflow java.yml"
          
          run_id=$(gh workflow run java.yml --ref temp_pipe --json id | jq -r '.id')
          while [[ -z "$run_id" ]]; do
            sleep 5
            run_id=$(gh run list --workflow=java.yml --branch=temp_pipe --json databaseId -q '.[0].databaseId')
          done
          while true; do
            status=$(gh run view "$run_id" --json status,conclusion -q '.status')
            if [[ "$status" == "completed" ]]; then
              conclusion=$(gh run view "$run_id" --json conclusion -q '.conclusion')
              if [[ "$conclusion" == "success" ]]; then
                echo "java.yml succeeded"
                break
              else
                echo "java.yml failed"
                exit 1
              fi
            fi
            sleep 10
          done
          
          echo "Executing workflow java_format.yml"
          
          run_id=$(gh workflow run java_format.yml --ref temp_pipe --json id | jq -r '.id')
          while [[ -z "$run_id" ]]; do
            sleep 5
            run_id=$(gh run list --workflow=java_format.yml --branch=temp_pipe --json databaseId -q '.[0].databaseId')
          done
          while true; do
            status=$(gh run view "$run_id" --json status,conclusion -q '.status')
            if [[ "$status" == "completed" ]]; then
              conclusion=$(gh run view "$run_id" --json conclusion -q '.conclusion')
              if [[ "$conclusion" == "success" ]]; then
                echo "java_format.yml succeeded"
                break
              else
                echo "java_format.yml failed"
                exit 1
              fi
            fi
            sleep 10
          done

      - name: Cleanup temp_pipe branch
        if: always()
        env:
          token: ${{ secrets.PIPE_TOKEN }}
        run: |
          git push origin --delete temp_pipe || echo "Branch already deleted or does not exist"